{"version":3,"sources":["store.js","components/Text.js","diamonds/BackfaceMaterial.js","diamonds/RefractionMaterial.js","blocks.js","diamonds/Diamonds.js","components/CustomMaterial.js","components/Plane.js","index.js"],"names":["state","sections","pages","zoom","paragraphs","offset","factor","header","image","aspect","text","stripes","color","height","diamonds","x","pos","Vector3","scale","top","createRef","Text","children","size","left","right","bottom","opacity","layers","font","props","data","useLoader","FontLoader","geom","useAsset","Promise","res","TextBufferGeometry","curveSegments","onUpdate","useCallback","self","box","geometry","computeBoundingBox","boundingBox","getSize","position","y","ref","useRef","last","current","useFrame","shift","lerp","frustumCulled","transparent","MultilineText","lineHeight","split","map","index","BackfaceMaterial","vertexShader","fragmentShader","side","BackSide","ShaderMaterial","RefractionMaterial","options","uniforms","envMap","value","backfaceMap","resolution","offsetContext","createContext","Block","useBlock","parentOffset","sectionHeight","undefined","curY","curTop","Provider","useThree","viewport","useContext","viewportWidth","width","viewportHeight","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth","offsetFactor","dummy","Object3D","Diamonds","nodes","GLTFLoader","useLayoutEffect","pCone1_lambert1_0","center","gl","scene","camera","clock","model","ratio","getPixelRatio","useMemo","envFbo","WebGLRenderTarget","backfaceFbo","texture","backfaceMaterial","refractionMaterial","forEach","i","t","getElapsedTime","s","set","copy","length","rotation","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","autoClear","setRenderTarget","clearColor","render","clearDepth","material","args","CustomMaterial","tex","hasTexture","Color","this","extend","Plane","forwardRef","Startup","Paragraph","w","alignRight","pixelWidth","Html","style","textAlign","tabIndex","Content","images","TextureLoader","minFilter","LinearFilter","className","Math","PI","App","scrollArea","onScroll","e","target","scrollTop","useEffect","linear","dpr","orthographic","fallback","Array","fill","_","id","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.12c18a50.chunk.js","sourcesContent":["import {\n  createRef\n} from \"react\"\nimport {\n  Vector3\n} from \"three\"\n\nconst state = {\n  sections: 9,\n  pages: 8,\n  zoom: 75,\n  paragraphs: [{\n      offset: 1,\n      factor: 1.75,\n      header: \"Content - 1\",\n      image: \"/3163.jpg\",\n      aspect: 1.51,\n      text: \"Since the Meta Hunters do not have a physical form they need the best cutting edge technology to survive and be sentient. The only technology that is shared by our planet and the Meta Planet is blockchain technology.\"\n    },\n    {\n      offset: 2,\n      factor: 2.0,\n      header: \"Content - 2\",\n      image: \"/photo-1519608487953-e999c86e7455.jpeg\",\n      aspect: 1.5,\n      text: \"Since they lost theiir sentience they cannot inject themselves back into the blockchain. Hence it is our duty to help them get there, from where they can start building toward getting back to their planet and reality.\"\n    },\n    {\n      offset: 3,\n      factor: 2.25,\n      header: \"Content - 3\",\n      image: \"/ph1.jpg\",\n      aspect: 1.5037,\n      text: \"Text area.\"\n    },\n    {\n      offset: 4,\n      factor: 2.0,\n      header: \"Content - 4\",\n      image: \"/ph3.jpg\",\n      aspect: 1,\n      text: \"Text area.\"\n    },\n    {\n      offset: 5,\n      factor: 1.75,\n      header: \"Content - 5\",\n      image: \"/photo-1533577116850-9cc66cad8a9b.jpeg\",\n      aspect: 1.55,\n      text: \"Text area.\"\n    },\n    {\n      offset: 7,\n      factor: 1.05,\n      header: \"Content - 6\",\n      image: \"/photo-1548191265-cc70d3d45ba1.jpeg\",\n      aspect: 1.77,\n      text: \"Text area.\"\n    }\n  ],\n  stripes: [{\n      offset: 0,\n      color: \"#000\",\n      height: 13\n    },\n    {\n      offset: 6.3,\n      color: \"#000\",\n      height: 20\n    }\n  ],\n  diamonds: [{\n      x: 0,\n      offset: 0,\n      pos: new Vector3(),\n      scale: 10,\n      factor: 4\n    },\n    // { x: 2, offset: 1.1, pos: new Vector3(), scale: 1.8, factor: 2.1 },\n    // { x: -5, offset: 2, pos: new Vector3(), scale: 1.8, factor: 2.5 },\n    // { x: 0, offset: 3.2, pos: new Vector3(), scale: 1.8, factor: 1.75 },\n    // { x: 0, offset: 4, pos: new Vector3(), scale: 1.8, factor: 2.5 },\n    // { x: 2, offset: 5.5, pos: new Vector3(), scale: 10, factor: 0.85 },\n    // { x: -5, offset: 7, pos: new Vector3(), scale: 1.8, factor: 2 },\n    {\n      x: 0,\n      offset: 8,\n      pos: new Vector3(),\n      scale: 2.5,\n      factor: 6\n    }\n  ],\n  top: createRef()\n}\n\nexport default state","import { FontLoader, Vector3, TextBufferGeometry } from \"three\"\nimport React, { useCallback, useRef } from \"react\"\nimport { useLoader, useFrame } from \"@react-three/fiber\"\nimport { useAsset } from \"use-asset\"\nimport lerp from \"lerp\"\nimport state from \"../store\"\n\nfunction Text({ children, size = 1, left, right, top, bottom, color = \"white\", opacity = 1, height = 0.01, layers = 0, font = \"/MOONGET_Heavy.blob\", ...props }) {\n  const data = useLoader(FontLoader, font)\n  const geom = useAsset(() => new Promise((res) => res(new TextBufferGeometry(children, { font: data, size: 1, height, curveSegments: 32 }))), [children])\n  const onUpdate = useCallback(\n    (self) => {\n      const box = new Vector3()\n      self.geometry.computeBoundingBox()\n      self.geometry.boundingBox.getSize(box)\n      self.position.x = left ? 0 : right ? -box.x : -box.x / 2\n      self.position.y = top ? 0 : bottom ? -box.y : -box.y / 2\n    },\n    [left, right, top, bottom]\n  )\n\n  const ref = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    ref.current.shift = lerp(ref.current.shift, (state.top.current - last) / 100, 0.1)\n    last = state.top.current\n  })\n\n  return (\n    <group {...props} scale={[size, size, 0.1]}>\n      <mesh geometry={geom} onUpdate={onUpdate} frustumCulled={false}>\n        <customMaterial ref={ref} color={color} transparent opacity={opacity} />\n      </mesh>\n    </group>\n  )\n}\n\nconst MultilineText = ({ text, size = 1, lineHeight = 1, position = [0, 0, 0], ...props }) =>\n  text.split(\"\\n\").map((text, index) => <Text key={index} size={size} {...props} position={[position[0], position[1] - index * lineHeight, position[2]]} children={text} />)\n\nexport { Text, MultilineText }\n","import { ShaderMaterial, BackSide } from \"three\"\n\nexport default class BackfaceMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    })\n  }\n}\n","import { ShaderMaterial } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize((modelMatrix * vec4( position, 1.0)).xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow(1.05 + dot(viewDirection, worldNormal), 100.0);\n      }\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution;\n        vec3 normal = worldNormal * (1.0 - 0.7) - texture2D(backfaceMap, uv).rgb * 0.7;\n        vec4 color = texture2D(envMap, uv += refract(viewDirection, normal, 1.0/1.5).xy);\n        //gl_FragColor = vec4(mix(color.rgb, vec3(0.15), fresnelFunc(viewDirection, normal)), 1.0);\n        gl_FragColor = vec4(mix(color.rgb, vec3(0.4), fresnelFunc(viewDirection, normal)), 1.0);\n      }`,\n      uniforms: {\n        envMap: { value: options.envMap },\n        backfaceMap: { value: options.backfaceMap },\n        resolution: { value: options.resolution }\n      }\n    })\n  }\n}\n","import React, { createContext, useRef, useContext } from \"react\"\nimport { useFrame, useThree } from \"@react-three/fiber\"\nimport lerp from \"lerp\"\nimport state from \"./store\"\n\nconst offsetContext = createContext(0)\n\nfunction Block({ children, offset, factor, ...props }) {\n  const { offset: parentOffset, sectionHeight } = useBlock()\n  const ref = useRef()\n  offset = offset !== undefined ? offset : parentOffset\n  useFrame(() => {\n    const curY = ref.current.position.y\n    const curTop = state.top.current\n    ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1)\n  })\n  return (\n    <offsetContext.Provider value={offset}>\n      <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n        <group ref={ref}>{children}</group>\n      </group>\n    </offsetContext.Provider>\n  )\n}\n\nfunction useBlock() {\n  const { sections, pages, zoom } = state\n  const { size, viewport } = useThree()\n  const offset = useContext(offsetContext)\n  const viewportWidth = viewport.width * zoom\n  const viewportHeight = viewport.height * zoom\n  const canvasWidth = viewportWidth / zoom\n  const canvasHeight = viewportHeight / zoom\n  const mobile = size.width < 700\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1)\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6)\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1))\n  const offsetFactor = (offset + 1.0) / sections\n  return {\n    viewport,\n    offset,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    mobile,\n    margin,\n    contentMaxWidth,\n    sectionHeight,\n    offsetFactor\n  }\n}\n\nexport { Block, useBlock }\n","import { WebGLRenderTarget, Object3D } from \"three\"\nimport React, { useRef, useMemo, useLayoutEffect } from \"react\"\nimport { useLoader, useThree, useFrame } from \"@react-three/fiber\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\nimport lerp from \"lerp\"\nimport BackfaceMaterial from \"./BackfaceMaterial\"\nimport RefractionMaterial from \"./RefractionMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst dummy = new Object3D()\nexport default function Diamonds() {\n  const { nodes } = useLoader(GLTFLoader, \"/diamond.glb\")\n  useLayoutEffect(() => nodes.pCone1_lambert1_0.geometry.center(), [])\n\n  const { size, gl, scene, camera, clock } = useThree()\n  const { contentMaxWidth, sectionHeight, mobile } = useBlock()\n  const model = useRef()\n  const ratio = gl.getPixelRatio()\n\n  const [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial] = useMemo(() => {\n    const envFbo = new WebGLRenderTarget(size.width * ratio, size.height * ratio)\n    const backfaceFbo = new WebGLRenderTarget(size.width * ratio, size.height * ratio)\n    const backfaceMaterial = new BackfaceMaterial()\n    const refractionMaterial = new RefractionMaterial({\n      envMap: envFbo.texture,\n      backfaceMap: backfaceFbo.texture,\n      resolution: [size.width * ratio, size.height * ratio]\n    })\n    return [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial]\n  }, [size, ratio])\n\n  useFrame(() => {\n    state.diamonds.forEach((data, i) => {\n      const t = clock.getElapsedTime() / 2\n      const { x, offset, scale, factor } = data\n      const s = (contentMaxWidth / 35) * scale\n      data.pos.set(mobile ? 0 : x, lerp(data.pos.y, -sectionHeight * offset * factor + (state.top.current / state.zoom) * factor, 0.1), 0)\n      dummy.position.copy(data.pos)\n      if (i === state.diamonds.length - 1) dummy.rotation.set(0, t, 0)\n      else dummy.rotation.set(t, t, t)\n      dummy.scale.set(s, s, s)\n      dummy.updateMatrix()\n      model.current.setMatrixAt(i, dummy.matrix)\n      model.current.instanceMatrix.needsUpdate = true\n    })\n\n    gl.autoClear = false\n    camera.layers.set(0)\n    gl.setRenderTarget(envFbo)\n    gl.clearColor()\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = backfaceMaterial\n    gl.setRenderTarget(backfaceFbo)\n    gl.clearDepth()\n    gl.render(scene, camera)\n    camera.layers.set(0)\n    gl.setRenderTarget(null)\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = refractionMaterial\n    gl.render(scene, camera)\n  }, 1)\n\n  return <instancedMesh ref={model} layers={1} args={[nodes.pCone1_lambert1_0.geometry, null, state.diamonds.length]} position={[0, 0, 50]} />\n}\n","import { ShaderMaterial, Color } from \"three\"\nimport { extend } from \"@react-three/fiber\"\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform float scale;\n      uniform float shift;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 2.0) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n      fragmentShader: `uniform sampler2D tex;\n      uniform float hasTexture;\n      uniform float shift;\n      uniform float scale;\n      uniform vec3 color;\n      uniform float opacity;\n      varying vec2 vUv;\n      void main() {\n        float angle = 1.55;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(tex, p + offset);\n        vec4 cga = texture2D(tex, p);\n        vec4 cb = texture2D(tex, p - offset);\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n        else gl_FragColor = vec4(color, opacity);\n      }`,\n      uniforms: {\n        tex: { value: null },\n        hasTexture: { value: 0 },\n        scale: { value: 0 },\n        shift: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color(\"white\") }\n      }\n    })\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.tex.value = value\n  }\n\n  get map() {\n    return this.uniforms.tex.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n","import React, { forwardRef, useRef } from \"react\"\nimport { useFrame } from \"@react-three/fiber\"\nimport lerp from \"lerp\"\nimport \"./CustomMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst Plane = forwardRef(({ color = \"white\", shift = 1, opacity = 1, args, map, ...props }, ref) => {\n  const { viewportHeight, offsetFactor } = useBlock()\n  const material = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    const { pages, top } = state\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1)\n    material.current.shift = lerp(material.current.shift, ((top.current - last) / shift) * 1.5, 0.1)\n    last = top.current\n  })\n  return (\n    <mesh ref={ref} {...props}>\n      <planeBufferGeometry args={args} />\n      <customMaterial ref={material} color={color} map={map} transparent opacity={opacity} />\n    </mesh>\n  )\n})\n\nexport default Plane\n","import ReactDOM from \"react-dom\"\nimport React, { Suspense, useEffect, useRef, useMemo } from \"react\"\nimport { Canvas, useLoader, useFrame } from \"@react-three/fiber\"\nimport { Html } from \"@react-three/drei\"\nimport { TextureLoader, LinearFilter } from \"three\"\nimport lerp from \"lerp\"\nimport { Text, MultilineText } from \"./components/Text\"\nimport Diamonds from \"./diamonds/Diamonds\"\nimport Plane from \"./components/Plane\"\nimport { Block, useBlock } from \"./blocks\"\nimport state from \"./store\"\nimport \"./styles.css\"\n\nfunction Startup() {\n  const ref = useRef()\n  useFrame(() => (ref.current.material.opacity = lerp(ref.current.material.opacity, 0, 0.025)))\n  return <Plane ref={ref} color=\"#0e0e0f\" position={[0, 0, 200]} scale={[100, 100, 1]} />\n}\n\nfunction Paragraph({ image, index, offset, factor, header, aspect, text }) {\n  const { contentMaxWidth: w, canvasWidth, margin, mobile } = useBlock()\n  const size = aspect < 1 && !mobile ? 0.65 : 1\n  const alignRight = (canvasWidth - w * size - margin) / 2\n  const pixelWidth = w * state.zoom * size\n  const left = !(index % 2)\n  const color = index % 2 ? \"#D40749\" : \"#2FE8C3\"\n  return (\n    <Block factor={factor} offset={offset}>\n      <group position={[left ? -alignRight : alignRight, 0, 0]}>\n        <Plane map={image} args={[1, 1, 32, 32]} shift={75} size={size} aspect={aspect} scale={[w * size, (w * size) / aspect, 1]} frustumCulled={false} />\n        <Html\n          style={{ width: pixelWidth / (mobile ? 1 : 2), textAlign: left ? \"left\" : \"right\" }}\n          position={[left || mobile ? (-w * size) / 2 : 0, (-w * size) / 2 / aspect - 0.4, 1]}>\n          <div tabIndex={index}>{text}</div>\n        </Html>\n        <Text left={left} right={!left} size={w * 0.04} color={color} top position={[((left ? -w : w) * size) / 2, (w * size) / aspect / 2 + 0.5, -1]}>\n          {header}\n        </Text>\n        <Block factor={0.2}>\n          <Text opacity={0.5} size={w * 0.5} color=\"#1A1E2A\" position={[((left ? w : -w) / 2) * size, (w * size) / aspect / 1, -10]}>\n            {\"0\" + (index + 1)}\n          </Text>\n        </Block>\n      </group>\n    </Block>\n  )\n}\n\nfunction Content() {\n  const images = useLoader(\n    TextureLoader,\n    state.paragraphs.map(({ image }) => image)\n  )\n  useMemo(() => images.forEach((texture) => (texture.minFilter = LinearFilter)), [images])\n  const { contentMaxWidth: w, canvasWidth, canvasHeight, mobile } = useBlock()\n  return (\n    <>\n      <Block factor={1} offset={0}>\n        <Block factor={1.2}>\n          <Text left size={w * 0.08} position={[-w / 2.2, 0.5, -1]} color=\"#d40749\">\n            META HUNTERS\n          </Text>\n        </Block>\n        <Block factor={1.0}>\n          <Html className=\"bottom-left\" style={{ color: \"white\" }} position={[-canvasWidth / 2, -canvasHeight / 2, 0]}>\n            YEAR 2022.{mobile ? <br /> : \" \"}THEY AWAIT.\n          </Html>\n        </Block>\n        <Block factor={0.2}>\n          <Text left size={w*0.02 }color=\"#fff\" position={[-canvasWidth / 3, -canvasHeight / 3, 0]}>\n          In the the year 2022. The Meta Hunters find themselves on earth.\n          </Text>\n        </Block>\n        <Block factor={0.2}>\n          <Text left size={w*0.02 }color=\"#fff\" position={[-canvasWidth / 3, -canvasHeight / 2, 0]}>\n          They seek revenge from their planet that exiled them.\n          </Text>\n        </Block>\n      </Block>\n      <Block factor={1.2} offset={5.7}>\n        <MultilineText top center size={w * 0.1} lineHeight={w / 5} position={[0, 0, -1]} color=\"#2fe8c3\" text={\"10,000\\nMeta\\nHunters\"} />\n      </Block>\n      {state.paragraphs.map((props, index) => (\n        <Paragraph key={index} index={index} {...props} image={images[index]} />\n      ))}\n      {state.stripes.map(({ offset, color, height }, index) => (\n        <Block key={index} factor={-1.5} offset={offset}>\n          <Plane args={[50, height, 32, 32]} shift={-4} color={color} rotation={[0, 0, Math.PI / 8]} position={[0, 0, -10]} />\n        </Block>\n      ))}\n      <Block factor={1.25} offset={8}>\n        <Html style={{ color: \"white\" }} className=\"bottom-left\" position={[-canvasWidth / 2, -canvasHeight / 2, 0]}>\n          Culture is not your friend.\n        </Html>\n      </Block>\n    </>\n  )\n}\n\nfunction App() {\n  const scrollArea = useRef()\n  const onScroll = (e) => (state.top.current = e.target.scrollTop)\n  useEffect(() => void onScroll({ target: scrollArea.current }), [])\n  return (\n    <>\n      <Canvas linear dpr={[1, 2]} orthographic camera={{ zoom: state.zoom, position: [0, 0, 500] }}>\n        <Suspense fallback={<Html center className=\"loading\" children=\"Loading...\" />}>\n          <Content />\n          <Diamonds />\n          <Startup />\n        </Suspense>\n      </Canvas>\n      <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll}>\n        {new Array(state.sections).fill().map((_, index) => (\n          <div key={index} id={\"0\" + index} style={{ height: `${(state.pages / state.sections) * 100}vh` }} />\n        ))}\n      </div>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}